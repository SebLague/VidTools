#pragma kernel CalculateMinMax

static const int intScalar = 10000;
RWTexture2D<float4> Source;
uint width;
uint height;

RWStructuredBuffer<int> minMaxBuffer;

[numthreads(8,8,1)]
void CalculateMinMax (uint3 id : SV_DispatchThreadID)
{
	
	if (id.x < 0 || id.x >= width || id.y < 0 || id.y >= height) {
		return;
	}

	float value = Source[id.xy].x;
	int valueInt = (int)(value * intScalar);

	InterlockedMin(minMaxBuffer[0], valueInt);
	InterlockedMax(minMaxBuffer[1], valueInt);
}

#pragma kernel NormalizeTexture
[numthreads(8,8,1)]
void NormalizeTexture (uint3 id : SV_DispatchThreadID)
{
	
	if (id.x < 0 || id.x >= width || id.y < 0 || id.y >= height) {
		return;
	}

	float minValue = (float)minMaxBuffer[0] / intScalar;
	float maxValue = (float)minMaxBuffer[1] / intScalar;

	float value = Source[id.xy].x;
	float normalizedValue = (value - minValue) / (maxValue - minValue);

	Source[id.xy] = normalizedValue;
}